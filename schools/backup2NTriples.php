<?php 
/**
 * This script converts a backug generated by the sparql query SELECT ?x ?y ?z WHERE {?x ?y ?z}
 * into NTriples. Read the backup from standard input and output the NTriples file in std out 
 * 
 * Copyright 2017 Cristiano Longo
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

require_once('config.php');
$f = fopen( 'php://stdin', 'r' );
publishNTriples($f,BASE);

/**
 * Generate and output an ntriples file by reading the csv $src
 * @param unknown $src url of the source csv
 * @param $ns a namespace used to generate blanknodes
 */
function publishNTriples($f,$ns){
	//skip the first line
	fgetcsv($f);

	// output
	header ( 'Content-type: application/n-triples; charset=UTF-8' );
	header ('Access-Control-Allow-Origin: *');
	//output other lines
	while (($row = fgetcsv($f)) !== false) {
		if (count($row)==3){
			$x=convertToNtriples($row[0],$ns);
			$y="<$row[1]>";
			$z=convertToNtriples($row[2],$ns);
			echo "$x $y $z .\n";
		}
	}
	fclose($f);
}

/**
 * Enclose the string into < > if it starts with http, enclose literals in ""
 * and leave blank nodes unchanged
 * @param unknown $string
 * @param $ns a namespace used to generate blanknodes
 */
function convertToNtriples($string, $ns){
	$string=expandPrefix($string);
	if (isURI($string))
		return "<$string>";

	//blank nodes remains unchanged
	if (preg_match('#^_:.*#', $string))
		return $string;

	$string=str_replace("\n",'',
			str_replace("\r",'', 
			str_replace('"',"\\\"", $string)));
	return "\"$string\"";
}

/**
 * Handle some prefixes
 * 
 * @prefixes a map prefix -> URI
 * @param $string the input string 
 * 
 * @return the string with the prefix expanded (if any)
 */
function expandPrefix($string){
	$prefixes = array( 'locn' => 'http://www.w3.org/ns/locn#',
			'org' => 'http://www.w3.org/ns/org#'
	);
	foreach($prefixes as $prefix => $uri)
		if (preg_match("#^$prefix:.*#", $string))
			return str_replace("$prefix:",$uri, $string);
	return $string;
}

/**
 * Check if the string is an URI by recognizing the protocol, if any
 * @param unknown $string
 * 
 * @return true if the string starts with a recognized protocol, false otherwise
 */
function isURI($string){
	$protocols = array( 'http', 'https', 'mailto' );
	foreach($protocols as $p)
		if (preg_match("#^$p:.*#", $string))
			return true;
	return false;
}
?>